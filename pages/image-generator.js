import Head from 'next/head';
import { useState } from 'react';
import styles from '../styles/Home.module.css'; // Reusing existing styles

const imageModels = [
  { id: 'dall-e-3', name: 'DALL·E 3 (OpenAI)', developer: 'OpenAI' },
  { id: 'dall-e-2', name: 'DALL·E 2 (OpenAI)', developer: 'OpenAI' },
  { id: 'imagen-3.0-generate-002', name: 'Imagen 3 (Google)', developer: 'Google' },
  { id: 'flux/schnell', name: 'FLUX.1 [schnell] (Flux)', developer: 'Flux' },
  { id: 'flux-pro', name: 'FLUX.1 [pro] (Flux)', developer: 'Flux' },
  { id: 'flux-pro/v1.1', name: 'FLUX 1.1 [pro] (Flux)', developer: 'Flux' },
  { id: 'flux-pro/v1.1-ultra', name: 'FLUX 1.1 [pro ultra] (Flux)', developer: 'Flux' },
  { id: 'flux/dev', name: 'FLUX.1 [dev] (Flux)', developer: 'Flux' },
  { id: 'flux/dev/image-to-image', name: 'FLUX.1 Image to Image (Flux)', developer: 'Flux' },
  { id: 'stable-diffusion-v3-medium', name: 'Stable Diffusion 3 Medium (Stability AI)', developer: 'Stability AI' },
  { id: 'stable-diffusion-v35-large', name: 'Stable Diffusion 3.5 Large (Stability AI)', developer: 'Stability AI' },
  { id: 'flux-realism', name: 'FLUX Realism LoRA (Flux)', developer: 'Flux' },
  { id: 'recraft-v3', name: 'Recraft v3 (Recraft AI)', developer: 'Recraft AI' },
];

export default function ImageGeneratorPage() {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState(''); // This will likely be an image URL or data
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedModel, setSelectedModel] = useState(imageModels[0].id);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!prompt.trim()) {
      setError('Prompt cannot be empty.');
      return;
    }
    setLoading(true);
    setError('');
    setResponse('');

    try {
      // IMPORTANT: The API endpoint '/api/generate' currently handles text generation.
      // You will need to modify it or create a new endpoint (e.g., '/api/generate-image')
      // to handle image generation requests and call the appropriate AIML API for images.
      const res = await fetch('/api/generate', { // This endpoint will need to be adapted for images
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt, model: selectedModel, type: 'image' }), // Added type to differentiate
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || `Error: ${res.status}`);
      }

      const data = await res.json();
      // Assuming the response for an image might be a URL or base64 string
      setResponse(data.response); // Adjust based on actual API response for images
    } catch (err) {
      console.error(err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>AI Image Generator</title>
        <meta name="description" content="Generate images using AI" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          AI Image Generator with AIML API
        </h1>
        

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.modelSelectorContainer}>
            <label htmlFor="model-select" className={styles.modelLabel}>Choose an image model:</label>
            <select
              id="model-select"
              value={selectedModel}
              onChange={(e) => setSelectedModel(e.target.value)}
              className={styles.modelSelect}
              disabled={loading}
            >
              {imageModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name} - {model.developer}
                </option>
              ))}
            </select>
          </div>

          <textarea
            className={styles.textarea}
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Enter your image prompt here..."
            rows={4}
            disabled={loading}
          />
          <button type="submit" className={styles.button} disabled={loading}>
            {loading ? 'Generating...' : 'Generate Image'}
          </button>
        </form>

        {error && <p className={styles.error}>{error}</p>}

        {response && (
          <div className={styles.responseContainer}>
            <h2>AI Generated Image:</h2>
            {/* Assuming response is an image URL. Adjust if it's base64 or other format */}
            <img src={response} alt="Generated by AI" style={{ maxWidth: '100%', marginTop: '1rem' }}/>
            {/* If response is not a direct URL, you might need different rendering logic */}
          </div>
        )}
      </main>
    </div>
  );
}